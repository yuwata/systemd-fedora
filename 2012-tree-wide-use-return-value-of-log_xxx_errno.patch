From fed66db05d54146a91cea64f20178d9db05cbdc7 Mon Sep 17 00:00:00 2001
From: Yu Watanabe <watanabe.yu+github@gmail.com>
Date: Fri, 20 Nov 2020 02:35:24 +0900
Subject: [PATCH] tree-wide: use return value of log_xxx_errno()

---
 src/journal/journalctl.c                     | 15 ++++------
 src/libsystemd/sd-device/device-enumerator.c | 30 +++++++-------------
 src/resolve/resolved-dns-query.c             |  3 +-
 src/update-utmp/update-utmp.c                | 12 +++-----
 4 files changed, 21 insertions(+), 39 deletions(-)

diff --git a/src/journal/journalctl.c b/src/journal/journalctl.c
index 74412ef17a..bcf2e01d5c 100644
--- a/src/journal/journalctl.c
+++ b/src/journal/journalctl.c
@@ -2019,13 +2019,12 @@ static int verify(sd_journal *j) {
 #endif
 
                 k = journal_file_verify(f, arg_verify_key, &first, &validated, &last, true);
-                if (k == -EINVAL) {
+                if (k == -EINVAL)
                         /* If the key was invalid give up right-away. */
                         return k;
-                } else if (k < 0) {
-                        log_warning_errno(k, "FAIL: %s (%m)", f->path);
-                        r = k;
-                } else {
+                else if (k < 0)
+                        r = log_warning_errno(k, "FAIL: %s (%m)", f->path);
+                else {
                         char a[FORMAT_TIMESTAMP_MAX], b[FORMAT_TIMESTAMP_MAX], c[FORMAT_TIMESPAN_MAX];
                         log_info("PASS: %s", f->path);
 
@@ -2374,10 +2373,8 @@ int main(int argc, char *argv[]) {
                         int q;
 
                         q = journal_directory_vacuum(d->path, arg_vacuum_size, arg_vacuum_n_files, arg_vacuum_time, NULL, !arg_quiet);
-                        if (q < 0) {
-                                log_error_errno(q, "Failed to vacuum %s: %m", d->path);
-                                r = q;
-                        }
+                        if (q < 0)
+                                r = log_error_errno(q, "Failed to vacuum %s: %m", d->path);
                 }
 
                 goto finish;
diff --git a/src/libsystemd/sd-device/device-enumerator.c b/src/libsystemd/sd-device/device-enumerator.c
index b9d4db323a..6888b58b67 100644
--- a/src/libsystemd/sd-device/device-enumerator.c
+++ b/src/libsystemd/sd-device/device-enumerator.c
@@ -743,16 +743,12 @@ static int enumerator_scan_devices_all(sd_device_enumerator *enumerator) {
                 int k;
 
                 k = enumerator_scan_dir(enumerator, "bus", "devices", NULL);
-                if (k < 0) {
-                        log_debug_errno(k, "sd-device-enumerator: Failed to scan /sys/bus: %m");
-                        r = k;
-                }
+                if (k < 0)
+                        r = log_debug_errno(k, "sd-device-enumerator: Failed to scan /sys/bus: %m");
 
                 k = enumerator_scan_dir(enumerator, "class", NULL, NULL);
-                if (k < 0) {
-                        log_debug_errno(k, "sd-device-enumerator: Failed to scan /sys/class: %m");
-                        r = k;
-                }
+                if (k < 0)
+                        r = log_debug_errno(k, "sd-device-enumerator: Failed to scan /sys/class: %m");
         }
 
         return r;
@@ -870,10 +866,8 @@ int device_enumerator_scan_subsystems(sd_device_enumerator *enumerator) {
         /* modules */
         if (match_subsystem(enumerator, "module")) {
                 k = enumerator_scan_dir_and_add_devices(enumerator, "module", NULL, NULL);
-                if (k < 0) {
-                        log_debug_errno(k, "sd-device-enumerator: Failed to scan modules: %m");
-                        r = k;
-                }
+                if (k < 0)
+                        r = log_debug_errno(k, "sd-device-enumerator: Failed to scan modules: %m");
         }
 
         if (access("/sys/subsystem", F_OK) >= 0)
@@ -884,19 +878,15 @@ int device_enumerator_scan_subsystems(sd_device_enumerator *enumerator) {
         /* subsystems (only buses support coldplug) */
         if (match_subsystem(enumerator, "subsystem")) {
                 k = enumerator_scan_dir_and_add_devices(enumerator, subsysdir, NULL, NULL);
-                if (k < 0) {
-                        log_debug_errno(k, "sd-device-enumerator: Failed to scan subsystems: %m");
-                        r = k;
-                }
+                if (k < 0)
+                        r = log_debug_errno(k, "sd-device-enumerator: Failed to scan subsystems: %m");
         }
 
         /* subsystem drivers */
         if (match_subsystem(enumerator, "drivers")) {
                 k = enumerator_scan_dir(enumerator, subsysdir, "drivers", "drivers");
-                if (k < 0) {
-                        log_debug_errno(k, "sd-device-enumerator: Failed to scan drivers: %m");
-                        r = k;
-                }
+                if (k < 0)
+                        r = log_debug_errno(k, "sd-device-enumerator: Failed to scan drivers: %m");
         }
 
         typesafe_qsort(enumerator->devices, enumerator->n_devices, device_compare);
diff --git a/src/resolve/resolved-dns-query.c b/src/resolve/resolved-dns-query.c
index f4bca54e19..c4d620ac8b 100644
--- a/src/resolve/resolved-dns-query.c
+++ b/src/resolve/resolved-dns-query.c
@@ -282,8 +282,7 @@ void dns_query_candidate_notify(DnsQueryCandidate *c) {
         return;
 
 fail:
-        log_warning_errno(r, "Failed to follow search domains: %m");
-        c->error_code = r;
+        c->error_code = log_warning_errno(r, "Failed to follow search domains: %m");
         dns_query_ready(c->query);
 }
 
diff --git a/src/update-utmp/update-utmp.c b/src/update-utmp/update-utmp.c
index 0546486f73..59c49f2a80 100644
--- a/src/update-utmp/update-utmp.c
+++ b/src/update-utmp/update-utmp.c
@@ -133,10 +133,8 @@ static int on_reboot(Context *c) {
         t = get_startup_time(c);
 
         q = utmp_put_reboot(t);
-        if (q < 0) {
-                log_error_errno(q, "Failed to write utmp record: %m");
-                r = q;
-        }
+        if (q < 0)
+                r = log_error_errno(q, "Failed to write utmp record: %m");
 
         return r;
 }
@@ -157,10 +155,8 @@ static int on_shutdown(Context *c) {
 #endif
 
         q = utmp_put_shutdown();
-        if (q < 0) {
-                log_error_errno(q, "Failed to write utmp record: %m");
-                r = q;
-        }
+        if (q < 0)
+                r = log_error_errno(q, "Failed to write utmp record: %m");
 
         return r;
 }
